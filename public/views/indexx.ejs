<!DOCTYPE html>
<html>
  <head>
      <meta charset="utf-8" />
      <title>Incroyable chat</title>
      <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons">
      <link rel="stylesheet" href="https://unpkg.com/bootstrap-material-design@4.1.1/dist/css/bootstrap-material-design.min.css" integrity="sha384-wXznGJNEXNG1NFsbm0ugrLFMQPWswR3lds2VeinahP8N0zJw9VWSopbjv2x7WCvX" crossorigin="anonymous">

      <link rel="stylesheet" href="/stylesheets/chat.css" />
    </head>

    <body>
      <div id="menu">
        <form id="createGame">
          <div class="input-group">
              <input class="form-control" id="gameName" />
              <select id="nbPlayersMax">
                  <option value="3">3</option>
                  <option value="4">4</option>
                  <option value="5">5</option>
              </select>
              <input type="submit" value="Créer" id="envoyerMessage" class="btn btn-primary active" />
          </div>
        </form>

        <div id="games">
            <tr>
              <th scope="col">Nom de la partie</th>
              <th scope="col">Nombre de joueurs</th>
              <th scope="col">Rejoindre</th>
            </tr>
        </div>
      </div>

      <div class="card bg-light" id="chat" style="display:none">
          <div class="card-header">
              <h6 class="card-subtitle mb-2 text-muted">Chat de la partie</h6>
          </div>
          <div class="card-body msg_card_body" id="chatBody">
              <div class="d-flex justify-content-start mb-1">
                  <div id="messages" class="msg_cotainer" ></div>
              </div>
          </div>

          <div class="card-footer bg-light" id="chatFooter">
              <form id="formSendMessage">
                <div class="input-group">
                    <input class="form-control" id="message" />
                    <input type="submit" value="Envoyer" id="envoyerMessage" class="btn btn-primary active" />
                </div>
              </form>
          </div>
      </div>

      <script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
      <script src="/socket.io/socket.io.js"></script>

      <script>
        var socket = io.connect('localhost:8080'); // http://projetl3.alwaysdata.net/ - localhost:8080
        var chat = document.getElementById('messages');

        var pseudo = prompt('Quel est votre pseudo ?');


        /*
            Fonction appelée lorsque le bouton "rejoindre" est sollicité. Émet par conséquent au serveur
            un event "joinGame" signifiant qu'une personne a rejoint une partie, et lui envoyant les informations
            de cette partie contenues dans les attributs du bouton que sont "gameName", "nbPlayers" et "nbPlayersMax".
        */

        function joinGame () {
            $("#menu").fadeOut(function() {
                $("#chat").fadeIn();
            });

            $(this).attr("nbPlayers", parseInt($(this).attr("nbPlayers"), 10) + 1);

            socket.emit("joinGame", { gameName: $(this).attr("gameName"),
                                      nbPlayers: $(this).attr("nbPlayers"),
                                      nbPlayersMax: $(this).attr("nbPlayersMax"),
                                      pseudo: pseudo });
        };


        /*
            Fonction appelée lorqu'il est nécessaire de rajouter une partie à la liste des parties. L'idée est que
            un tableau avec des lignes (tr) et des colonnes (td) est utilisé. Il y a 3 colonnes, utilisées
            respectivement pour le nom de la partie, le nombre de joueurs et le placement du bouton rejoindre.

            A noter que l'id de chaque ligne est le nom de la partie, chose qui nous servira plus tard afin
            d'identifier chacunes des lignes et de récupérer des informations.

            De plus, les informations de la parties sont "stockées" dans les attributs du boutons, de telle sorte que
            lorsque ce-dernier est utilisé, nous puissions récupérer les différentes informations en faisant appel
            à $(this).attr("nomAttributARecup").
        */

        function appendGame (gameName, nbPlayersMax) {
          let tr = $('<tr />').attr('id', gameName);

          let tdGamename = $('<td />');
          tr.append(tdGamename.html(gameName));

          let tdNbPlayers = $('<td />');
          tr.append(tdNbPlayers.html("1/" + nbPlayersMax));

          let button = $('<button />');
          let tdButton = $('<td />');
          tr.append(tdButton.append(button.html("Rejoindre")
                                          .attr("gameName", gameName)
                                          .attr("nbPlayersMax", nbPlayersMax.toString())
                                          .attr("nbPlayers", 1)
                                          .click(joinGame)));

          $('#games').append(tr);
        };


        /*
            Fonction appelée lorsqu'un message doit être affiché dans le chat, dans le cas d'un event "newMessage".
            Ce-dernier est simplement append dans le chat qui a ici pour id "messages".
        */

        function appendMessage (pseudo, message) {
            $('#messages').append("<p><b>" + pseudo + "</b> : " + message + "</p>");
        };


        /*
            Fonction permettant de modifier les informations sur une game lorsque par exemple un nouveau joueur a rejoint
            la partie, ou que cette-dernière est pleine et qu'il est nécessaire de al rendre inacessible a plus de joueurs.

            L'idée est que seules les deux dernières colonnes sont à modifier. En effet, le nom de la partie qui est la première
            colonne ne changera pas. Cependant, la deuxième colonne, qui est le nombre de joueurs, doit être modifié à chaque connexion
            de joueurs. Enfin, la dernière colonne, qui est celle du bouton, doit être également modifiée. En effet, le bouton contient
            dans ses attributs les informations de la partie, et il est donc nécessaire de modifier le nombre de joueurs.
        */

        function updateGameDatas (gameName, nbPlayers, nbPlayersMax) {
          tr = "#" + gameName;
          index = 0;

          $(tr).find('td').each(function() {
                if (index == 1) {
                    $(this).fadeOut(function() {
                        $(this).html(nbPlayers.toString() + "/" + nbPlayersMax.toString());
                        $(this).fadeIn();
                    })
                }
                else if (index == 2) {
                    $(this).attr("nbPlayers", nbPlayers);
                    // rendre la partie inacessible si cette-dernière est pleine.
                }

                index += 1;
            });
        };


        /*
            --------------- LISTEN EVENTS ---------------
        */

        socket.on('newMessage', function(data) {
            appendMessage(data.pseudo, data.message);
            chat.scrollIntoView(false);
        });

        socket.on('newPlayer', function(pseudo) {
            $('#messages').append("<p><b>" + pseudo + "</b> vient de se connecter !</p>");
            chat.scrollIntoView(false);
        });

        socket.on('newGame', function(data) {
            appendGame(data.gameName, data.nbPlayersMax);
        })

        socket.on('gameFull', function(data) {
          updateGameDatas(data.gameName, data.nbPlayers, data.nbPlayers);
        })

        socket.on('updateGame', function(data) {
          updateGameDatas(data.gameName, data.nbPlayers, data.nbPlayersMax);
        })


        /*
            --------------- LISTEN ACTIONS OF PLAYER ---------------
        */

        $('#formSendMessage').submit(function () {
          socket.emit('newMessage', $('#message').val());
          appendMessage(pseudo, $('#message').val());

          chat.scrollIntoView(false);
          $('#message').val('');

          return false;
        });

        $('#createGame').submit(function () {
          socket.emit('newGame', { gameName: $('#gameName').val(),
                                   nbPlayersMax: parseInt($('#nbPlayersMax').val()),
                                   pseudo: pseudo });

          $("#menu").fadeOut(function() {
              $('#gameName').val('');
              $("#chat").fadeIn();
          });

          // Si le joueur quitte la partie il récupère les infos de toutes les parties, pas besoin d'actualiser les infos derrière
          // appendGame($('#gameName').val(), parseInt($('#nbPlayersMax').val()));
          return false;
        });
      </script>
  </body>
</html>
